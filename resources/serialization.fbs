namespace krypto.serialization;

// general

enum Exchange: byte {SIM, COINBASE}

enum Side: byte {UNKNOWN, BUY, SELL}

enum OrderSide: byte {UNKNOWN, BID, ASK}

enum OrderStatus: byte {UNKNOWN, IN_FLIGHT, CANCEL_IN_FLIGHT, REPLACE_IN_FLIGHT, NEW, ACCEPTED, CANCELLED, REPLACED, REJECTED, CANCEL_REJECTED, REPLACE_REJECTED, FILLED, PARTIALLY_FILLED, EXPIRED, DONE}

enum TimeInForce: byte {DAY, IOC, FOK, GTC, GTT}

table Empty {
}

table SequenceNumber {
  value: long;
}

table Heartbeat {
  security_id: long;
  timestamp: long;
}

// instruments

enum InstrumentType: byte {UNKNOWN, STOCK, FUTURE, OPTION, FOREX, CRYPTO}

enum Currency : byte {
    UNKNOWN,
    BAT,
    BCH,
    BTC,
    CVC,
    DAI,
    DNT,
    EOS,
    ETC,
    ETH,
    EUR,
    GBP,
    GNT,
    LINK,
    LOOM,
    LTC,
    MANA,
    REP,
    USD,
    USDC,
    XLM,
    XRP,
    ZEC,
    ZRX,
    XTZ,
    ALGO,
    DASH,
    OXT,
    ATOM,
    KNC,
    OMG,
    MKR,
    WBTC,
    NU,
    YFI,
    BAND,
    UMA,
    NMR,
    FIL,
    CGLD,
    LRC,
    COMP,
    UNI,
    REN,
    BAL,
    GRT,
    BNT,
    AAVE,
    SNX,
    WLUNA,
    DOGE,
    RAD,
    GTC,
    TRU,
    SUSHI,
    SKL,
    COTI,
    REQ,
    FORTH,
    ENJ,
    USDT,
    DOT,
    CHZ,
    UST,
    MASK,
    DDX,
    SOL,
    RLY,
    AXS,
    ADA,
    STORJ,
    ICP,
    IOTX,
    CRV,
    FET,
    POLY,
    MKN,
    MIR,
    PAX,
    MATIC,
    ANKR,
    OGN,
    RLC,
    TRB,
    ORN,
    CTSI,
    YFII,
    BOND,
    CLV,
    TRIBE,
    ACH,
    PLA,
    QUICK,
    MLN,
    QNT,
    LPT,
    KEEP,
    RAI,
    NKN,
    AMP,
    FARM,
    SHIB,
    XYO,
    RGT,
    BTRST,
    AGLD,
    ZEN
}

enum RequestType: byte {INVALID, ALL, ID, EXCHANGE, PRODUCT}

table Instrument {
  id: long;
  type: InstrumentType;
  symbol: string;
  exchange: Exchange;
  exchange_symbol: string;
  tick_size: double;
  min_size: double;
  max_size: double;
  crypto_base: Currency;
  crypto_quote: Currency;
  active: bool;
  sandbox_enabled: bool;
}

// market data

table Quote {
  timestamp: long;
  security_id: long;
  bid: long;
  ask: long;
  last: long;
  bid_quantity: long;
  ask_quantity: long;
  last_quantity: long;
}

struct SnapshotPriceLevel {
  price: long;
  quantity: long;
}

table Snapshot {
  timestamp: long;
  security_id: long;
  bids: [SnapshotPriceLevel];
  asks: [SnapshotPriceLevel];
}

struct IncrementalPriceLevel {
  price: long;
  quantity: long;
  side: long;
}

table Incremental {
  timestamp: long;
  security_id: long;
  updates: [IncrementalPriceLevel];
}

table Trade {
  timestamp: long;
  security_id: long;
  price: long;
  quantity: long;
  side: Side;
  trade_id: string;
}

table InstrumentRequest {
  type: RequestType;
}

table InstrumentResponse {
  instruments: [Instrument];
}

table InstrumentRefreshRequest {
}

// orders

table OrderRequest {
  timestamp: long;
  security_id: long;
  price: long;
  quantity: long;
  side: Side;
  order_id: string;
  tif: TimeInForce;
  trader: string;
  book: string;
}

table OrderCancelRequest {
  timestamp: long;
  order_id: string;
}

table OrderReplaceRequest {
  timestamp: long;
  order_id: string;
  price: long;
  quantity: long;
  side: Side;
}

table OrderUpdate {
  timestamp: long;
  order_id: string;
  exchange_order_id: string;
  status: OrderStatus;
  filled_quantity: long;
  filled_price: long;
}

table Order {
  request: OrderRequest;
  updates: [OrderUpdate];
  fees: double;
}

// Risk

enum RiskRequestType : byte {ALL, TRADER, SECURITY_ID, BOOK}

struct Position {
  timestamp: long;
  security_id: long;
  position: double;
  pnl: double;
  mark_price: double;
}

table TraderPosition {
  trader: string;
  positions: [Position];
}

table BookPosition {
  book: string;
  positions: [Position];
}

table RiskSummary {
  timestamp: long;
  positions: [Position];
  trader_positions: [TraderPosition];
  book_positions: [BookPosition];
  pnl: double;
}

table RiskSummaryRequest {
  type: RiskRequestType;
  trader: string;
  security_id: int64;
  book: string;
}

// Model

table TheoreticalSnapshot {
  timestamp: long;
  security_id: long;
  price: double;
  adjusted_price: double;
  error: double;
  mm_base_bid: double;
  mm_base_ask: double;
  mm_base_spread: double;
  bid_liquidity: double;
  ask_liquidity: double;
}