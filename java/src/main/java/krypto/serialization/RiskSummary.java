// automatically generated by the FlatBuffers compiler, do not modify

package krypto.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RiskSummary extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static RiskSummary getRootAsRiskSummary(ByteBuffer _bb) { return getRootAsRiskSummary(_bb, new RiskSummary()); }
  public static RiskSummary getRootAsRiskSummary(ByteBuffer _bb, RiskSummary obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RiskSummary __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamp() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public krypto.serialization.Position positions(int j) { return positions(new krypto.serialization.Position(), j); }
  public krypto.serialization.Position positions(krypto.serialization.Position obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 40, bb) : null; }
  public int positionsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public krypto.serialization.Position.Vector positionsVector() { return positionsVector(new krypto.serialization.Position.Vector()); }
  public krypto.serialization.Position.Vector positionsVector(krypto.serialization.Position.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 40, bb) : null; }
  public krypto.serialization.TraderPosition traderPositions(int j) { return traderPositions(new krypto.serialization.TraderPosition(), j); }
  public krypto.serialization.TraderPosition traderPositions(krypto.serialization.TraderPosition obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int traderPositionsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public krypto.serialization.TraderPosition.Vector traderPositionsVector() { return traderPositionsVector(new krypto.serialization.TraderPosition.Vector()); }
  public krypto.serialization.TraderPosition.Vector traderPositionsVector(krypto.serialization.TraderPosition.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public krypto.serialization.BookPosition bookPositions(int j) { return bookPositions(new krypto.serialization.BookPosition(), j); }
  public krypto.serialization.BookPosition bookPositions(krypto.serialization.BookPosition obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bookPositionsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public krypto.serialization.BookPosition.Vector bookPositionsVector() { return bookPositionsVector(new krypto.serialization.BookPosition.Vector()); }
  public krypto.serialization.BookPosition.Vector bookPositionsVector(krypto.serialization.BookPosition.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public double pnl() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createRiskSummary(FlatBufferBuilder builder,
      long timestamp,
      int positionsOffset,
      int trader_positionsOffset,
      int book_positionsOffset,
      double pnl) {
    builder.startTable(5);
    RiskSummary.addPnl(builder, pnl);
    RiskSummary.addTimestamp(builder, timestamp);
    RiskSummary.addBookPositions(builder, book_positionsOffset);
    RiskSummary.addTraderPositions(builder, trader_positionsOffset);
    RiskSummary.addPositions(builder, positionsOffset);
    return RiskSummary.endRiskSummary(builder);
  }

  public static void startRiskSummary(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(0, timestamp, 0L); }
  public static void addPositions(FlatBufferBuilder builder, int positionsOffset) { builder.addOffset(1, positionsOffset, 0); }
  public static void startPositionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(40, numElems, 8); }
  public static void addTraderPositions(FlatBufferBuilder builder, int traderPositionsOffset) { builder.addOffset(2, traderPositionsOffset, 0); }
  public static int createTraderPositionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTraderPositionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBookPositions(FlatBufferBuilder builder, int bookPositionsOffset) { builder.addOffset(3, bookPositionsOffset, 0); }
  public static int createBookPositionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBookPositionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPnl(FlatBufferBuilder builder, double pnl) { builder.addDouble(4, pnl, 0.0); }
  public static int endRiskSummary(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RiskSummary get(int j) { return get(new RiskSummary(), j); }
    public RiskSummary get(RiskSummary obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

