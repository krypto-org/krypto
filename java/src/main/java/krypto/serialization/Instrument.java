// automatically generated by the FlatBuffers compiler, do not modify

package krypto.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Instrument extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Instrument getRootAsInstrument(ByteBuffer _bb) { return getRootAsInstrument(_bb, new Instrument()); }
  public static Instrument getRootAsInstrument(ByteBuffer _bb, Instrument obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Instrument __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public byte type() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String symbol() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer symbolAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer symbolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public byte exchange() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String exchangeSymbol() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer exchangeSymbolAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer exchangeSymbolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public double tickSize() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double minSize() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double maxSize() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public byte cryptoBase() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte cryptoQuote() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean active() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean sandboxEnabled() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createInstrument(FlatBufferBuilder builder,
      long id,
      byte type,
      int symbolOffset,
      byte exchange,
      int exchange_symbolOffset,
      double tick_size,
      double min_size,
      double max_size,
      byte crypto_base,
      byte crypto_quote,
      boolean active,
      boolean sandbox_enabled) {
    builder.startTable(12);
    Instrument.addMaxSize(builder, max_size);
    Instrument.addMinSize(builder, min_size);
    Instrument.addTickSize(builder, tick_size);
    Instrument.addId(builder, id);
    Instrument.addExchangeSymbol(builder, exchange_symbolOffset);
    Instrument.addSymbol(builder, symbolOffset);
    Instrument.addSandboxEnabled(builder, sandbox_enabled);
    Instrument.addActive(builder, active);
    Instrument.addCryptoQuote(builder, crypto_quote);
    Instrument.addCryptoBase(builder, crypto_base);
    Instrument.addExchange(builder, exchange);
    Instrument.addType(builder, type);
    return Instrument.endInstrument(builder);
  }

  public static void startInstrument(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(1, type, 0); }
  public static void addSymbol(FlatBufferBuilder builder, int symbolOffset) { builder.addOffset(2, symbolOffset, 0); }
  public static void addExchange(FlatBufferBuilder builder, byte exchange) { builder.addByte(3, exchange, 0); }
  public static void addExchangeSymbol(FlatBufferBuilder builder, int exchangeSymbolOffset) { builder.addOffset(4, exchangeSymbolOffset, 0); }
  public static void addTickSize(FlatBufferBuilder builder, double tickSize) { builder.addDouble(5, tickSize, 0.0); }
  public static void addMinSize(FlatBufferBuilder builder, double minSize) { builder.addDouble(6, minSize, 0.0); }
  public static void addMaxSize(FlatBufferBuilder builder, double maxSize) { builder.addDouble(7, maxSize, 0.0); }
  public static void addCryptoBase(FlatBufferBuilder builder, byte cryptoBase) { builder.addByte(8, cryptoBase, 0); }
  public static void addCryptoQuote(FlatBufferBuilder builder, byte cryptoQuote) { builder.addByte(9, cryptoQuote, 0); }
  public static void addActive(FlatBufferBuilder builder, boolean active) { builder.addBoolean(10, active, false); }
  public static void addSandboxEnabled(FlatBufferBuilder builder, boolean sandboxEnabled) { builder.addBoolean(11, sandboxEnabled, false); }
  public static int endInstrument(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Instrument get(int j) { return get(new Instrument(), j); }
    public Instrument get(Instrument obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

