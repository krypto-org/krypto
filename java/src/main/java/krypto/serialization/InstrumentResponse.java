// automatically generated by the FlatBuffers compiler, do not modify

package krypto.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class InstrumentResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static InstrumentResponse getRootAsInstrumentResponse(ByteBuffer _bb) { return getRootAsInstrumentResponse(_bb, new InstrumentResponse()); }
  public static InstrumentResponse getRootAsInstrumentResponse(ByteBuffer _bb, InstrumentResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public InstrumentResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public krypto.serialization.Instrument instruments(int j) { return instruments(new krypto.serialization.Instrument(), j); }
  public krypto.serialization.Instrument instruments(krypto.serialization.Instrument obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int instrumentsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public krypto.serialization.Instrument.Vector instrumentsVector() { return instrumentsVector(new krypto.serialization.Instrument.Vector()); }
  public krypto.serialization.Instrument.Vector instrumentsVector(krypto.serialization.Instrument.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createInstrumentResponse(FlatBufferBuilder builder,
      int instrumentsOffset) {
    builder.startTable(1);
    InstrumentResponse.addInstruments(builder, instrumentsOffset);
    return InstrumentResponse.endInstrumentResponse(builder);
  }

  public static void startInstrumentResponse(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addInstruments(FlatBufferBuilder builder, int instrumentsOffset) { builder.addOffset(0, instrumentsOffset, 0); }
  public static int createInstrumentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInstrumentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endInstrumentResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public InstrumentResponse get(int j) { return get(new InstrumentResponse(), j); }
    public InstrumentResponse get(InstrumentResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

